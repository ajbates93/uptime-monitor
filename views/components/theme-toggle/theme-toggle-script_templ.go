// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package themetoggle

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// ThemeToggleScript provides the JavaScript for theme toggle functionality
func ThemeToggleScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\t// Theme toggle functionality\n\t\tfunction initializeThemeToggle() {\n\t\t\tconsole.log('Initializing theme toggle...');\n\t\t\tconst button = document.getElementById('theme-toggle');\n\t\t\tconsole.log('Theme toggle button found:', button);\n\t\t\t\n\t\t\tif (button) {\n\t\t\t\t// Remove existing event listeners to prevent duplicates\n\t\t\t\tbutton.replaceWith(button.cloneNode(true));\n\t\t\t\tconst newButton = document.getElementById('theme-toggle');\n\t\t\t\t\n\t\t\t\tnewButton.addEventListener('click', function() {\n\t\t\t\t\tconsole.log('Theme toggle clicked!');\n\t\t\t\t\tconst html = document.documentElement;\n\t\t\t\t\tconst currentTheme = localStorage.getItem('theme') || 'light';\n\t\t\t\t\tconst newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\t\t\t\t\tconsole.log('Switching from', currentTheme, 'to', newTheme);\n\t\t\t\t\tlocalStorage.setItem('theme', newTheme);\n\t\t\t\t\tif (newTheme === 'dark') {\n\t\t\t\t\t\thtml.classList.add('dark');\n\t\t\t\t\t\tconsole.log('Added dark class to html element');\n\t\t\t\t\t} else {\n\t\t\t\t\t\thtml.classList.remove('dark');\n\t\t\t\t\t\tconsole.log('Removed dark class from html element');\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log('Current html classes:', html.className);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Initialize on DOM content loaded\n\t\tdocument.addEventListener('DOMContentLoaded', initializeThemeToggle);\n\t\t\n\t\t// Initialize immediately if DOM is already loaded\n\t\tif (document.readyState === 'loading') {\n\t\t\t// DOM is still loading, wait for DOMContentLoaded\n\t\t} else {\n\t\t\t// DOM is already loaded, initialize immediately\n\t\t\tinitializeThemeToggle();\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
