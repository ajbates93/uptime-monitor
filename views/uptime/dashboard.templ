package uptime

import (
	"fmt"
	"the-ark/internal/auth"
	"the-ark/internal/features/uptime/models"
	"the-ark/views/components/badge"
	"the-ark/views/components/button"
	"the-ark/views/components/card"
	"the-ark/views/components/theme-toggle"
	"the-ark/views/layouts"
)

templ Dashboard(user *auth.User, websites []models.DashboardWebsite) {
	@layouts.BaseLayout(layouts.BaseLayoutProps{
		Title: "The Ark - Uptime Monitor",
		Description: "Website uptime monitoring dashboard",
	}) {
		<div class="min-h-screen flex">
			<!-- Sidebar -->
			<nav class="w-64 bg-white dark:bg-gray-800 shadow-lg transition-colors duration-200">
				<div class="p-6">
					<div class="flex items-center justify-between">
						<h1 class="text-2xl font-bold text-gray-900 dark:text-white">The Ark</h1>
						@themetoggle.ThemeToggle(themetoggle.Props{})
					</div>
					if !user.IsAnonymous() {
						<div class="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg border-0 dark:border-gray-600">
							<div class="text-sm font-medium text-gray-900 dark:text-white">{ user.Name }</div>
							<div class="text-sm text-gray-500 dark:text-gray-300">{ user.Email }</div>
						</div>
					}
				</div>
				
				<ul class="px-4 space-y-2">
					<li>
						<a href="/" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg">
							Dashboard
						</a>
					</li>
					<li>
						<a href="/uptime" class="flex items-center px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 dark:bg-blue-900/20 dark:text-blue-400 rounded-lg">
							Uptime Monitor
						</a>
					</li>
					<li>
						<a href="/server" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg">
							Server Monitoring
						</a>
					</li>
					<li>
						<a href="/ssl" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg">
							SSL Tracker
						</a>
					</li>
					<li>
						<a href="/logs" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg">
							Log Viewer
						</a>
					</li>
				</ul>
				
				if !user.IsAnonymous() {
					<div class="absolute bottom-0 w-64 p-4">
						@button.Button(button.Props{
							Variant: button.VariantOutline,
							Size: button.SizeSm,
							Class: "w-full border-gray-600 dark:border-gray-600 text-gray-900 dark:text-white",
							Attributes: templ.Attributes{
								"hx-post": "/auth/logout",
								"hx-target": "body",
							},
						}) {
							Logout
						}
					</div>
				}
			</nav>
			
			<!-- Main Content -->
			<main class="flex-1 p-8">
				<header class="mb-8">
					<div class="flex items-center justify-between">
						<h2 class="text-3xl font-bold text-gray-900 dark:text-white">Uptime Monitor</h2>
						@button.Button(button.Props{
							Variant: button.VariantDefault,
							Size: button.SizeSm,
							Attributes: templ.Attributes{
								"hx-get": "/uptime/api/dashboard",
								"hx-target": ".website-grid",
								"hx-swap": "innerHTML",
								"hx-indicator": "#refresh-indicator",
							},
						}) {
							<span id="refresh-indicator" class="htmx-indicator">ðŸ”„</span>
							Refresh Dashboard
						}
					</div>
				</header>
				
				<div class="website-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
					for _, website := range websites {
						@UptimeWebsiteCard(website)
					}
				</div>
			</main>
		</div>
		
		<!-- Theme toggle script -->
		@themetoggle.ThemeToggleScript()
	}
}

// UptimeWebsiteCard component for individual website updates
templ UptimeWebsiteCard(website models.DashboardWebsite) {
	@card.Card(card.Props{
		Class: "bg-white dark:bg-gray-800 hover:shadow-lg transition-shadow border-gray-200 dark:border-gray-700",
	}) {
		@card.Header() {
			<div class="flex items-center justify-between">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white">{ website.Website.Name }</h3>
				@StatusBadge(website.Status)
			</div>
		}
		@card.Content() {
			<div class="space-y-3">
				<div>
					<p class="text-sm text-gray-500 dark:text-gray-400">URL</p>
					<p class="text-sm text-gray-900 dark:text-white break-all">{ website.Website.URL }</p>
				</div>
				if website.CheckedAt != nil {
					<div>
						<p class="text-sm text-gray-500 dark:text-gray-400">Last checked</p>
						<p class="text-sm text-gray-900 dark:text-white">{ website.CheckedAt.Format("2006-01-02 15:04:05") }</p>
					</div>
				}
			</div>
		}
		@card.Footer() {
			@button.Button(button.Props{
				Variant: button.VariantOutline,
				Size: button.SizeSm,
				Class: "border-gray-600 dark:border-gray-600 text-gray-900 dark:text-white",
				Attributes: templ.Attributes{
					"hx-post": "/uptime/api/websites/" + fmt.Sprint(website.Website.ID) + "/check",
					"hx-target": "closest .website-card",
					"hx-swap": "outerHTML",
					"hx-indicator": "#check-indicator-" + fmt.Sprint(website.Website.ID),
				},
			}) {
				<span id={ "check-indicator-" + fmt.Sprint(website.Website.ID) } class="htmx-indicator">ðŸ”„</span>
				Check Now
			}
		}
	}
}

// StatusBadge renders a status badge with appropriate colors
templ StatusBadge(status string) {
	switch status {
	case "up":
		@badge.Badge(badge.Props{
			Variant: badge.VariantDefault,
			Class: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 border-green-200 dark:border-green-700",
		}) {
			Up
		}
	case "down":
		@badge.Badge(badge.Props{
			Variant: badge.VariantDestructive,
			Class: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 border-red-200 dark:border-red-700",
		}) {
			Down
		}
	default:
		@badge.Badge(badge.Props{
			Variant: badge.VariantSecondary,
			Class: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200 border-gray-200 dark:border-gray-600",
		}) {
			Unknown
		}
	}
} 