package uptime

import (
	"fmt"
	"the-ark/internal/auth"
	"the-ark/internal/features/uptime/models"
	"the-ark/views/components/badge"
	"the-ark/views/components/button"
	"the-ark/views/components/card"
	"the-ark/views/components/navigation"
	"the-ark/views/components/theme-toggle"
	"the-ark/views/layouts"
)

templ Dashboard(user *auth.User, websites []models.DashboardWebsite) {
	@layouts.BaseLayout(layouts.BaseLayoutProps{
		Title: "The Ark - Uptime Monitor",
		Description: "Website uptime monitoring dashboard",
	}) {
		<div class="min-h-screen flex">
			<!-- Sidebar -->
			@navigation.Navigation(navigation.Props{
				User: user,
				ActivePage: "uptime",
			})
			
			<!-- Main Content -->
			<main class="flex-1 p-8">
				<header class="mb-8">
					<div class="flex items-center justify-between">
						<div>
							<h2 class="text-3xl font-bold text-gray-900 dark:text-white">Uptime Monitor</h2>
							<p class="text-sm text-gray-500 dark:text-gray-400 mt-1">{ len(websites) }/8 sites being monitored</p>
						</div>
						<div class="flex items-center space-x-3">
							<!-- Debug info -->
							<span class="text-xs text-gray-500">Debug: { len(websites) } websites</span>
							
							if len(websites) < 8 {
								@button.Button(button.Props{
									Variant: button.VariantDefault,
									Size: button.SizeSm,
									Class: "bg-blue-600 hover:bg-blue-700 text-white",
									Attributes: templ.Attributes{
										"hx-get": "/uptime/add",
										"hx-target": "#add-site-modal",
										"hx-swap": "innerHTML",
									},
								}) {
									+ Add Site
								}
							} else {
								<span class="text-sm text-gray-500">Max sites reached</span>
							}
							@button.Button(button.Props{
								Variant: button.VariantOutline,
								Size: button.SizeSm,
								Class: "border-gray-200 dark:border-gray-600 text-gray-900 dark:text-white hover:bg-gray-50 dark:hover:bg-gray-700",
								Attributes: templ.Attributes{
									"hx-get": "/uptime/api/dashboard",
									"hx-target": ".website-grid",
									"hx-swap": "innerHTML",
									"hx-indicator": "#refresh-indicator",
								},
							}) {
								<span id="refresh-indicator" class="htmx-indicator">üîÑ</span>
								Refresh Dashboard
							}
						</div>
					</div>
				</header>
				
				<div class="website-grid grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
					for _, website := range websites {
						@UptimeWebsiteCard(website)
					}
				</div>

				<!-- Add Site Modal Container -->
				<div id="add-site-modal"></div>
			</main>
		</div>
		
		<!-- Theme toggle script -->
		@themetoggle.ThemeToggleScript()
	}
}

// UptimeWebsiteCard component for individual website updates
templ UptimeWebsiteCard(website models.DashboardWebsite) {
	@card.Card(card.Props{
		Class: "website-card bg-white dark:bg-gray-800 hover:shadow-lg transition-shadow border-gray-200 dark:border-gray-700",
	}) {
		@card.Header() {
			<div class="flex items-center justify-between">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white">{ website.Website.Name }</h3>
				@StatusBadge(website.Status)
			</div>
		}
		@card.Content() {
			<div class="space-y-3">
				<div>
					<p class="text-sm text-gray-500 dark:text-gray-400">URL</p>
					<p class="text-sm text-gray-900 dark:text-white break-all">{ website.Website.URL }</p>
				</div>
				if website.CheckedAt != nil {
					<div>
						<p class="text-sm text-gray-500 dark:text-gray-400">Last checked</p>
						<p class="text-sm text-gray-900 dark:text-white">{ website.CheckedAt.Format("2006-01-02 15:04:05") }</p>
					</div>
				}
			</div>
		}
		@card.Footer() {
			<div class="flex space-x-2">
				@button.Button(button.Props{
					Variant: button.VariantOutline,
					Size: button.SizeSm,
					Class: "flex-1 border-gray-200 dark:border-gray-600 text-gray-900 dark:text-white hover:bg-gray-50 dark:hover:bg-gray-700",
					Attributes: templ.Attributes{
						"hx-post": "/uptime/api/websites/" + fmt.Sprint(website.Website.ID) + "/check",
						"hx-target": "closest .website-card",
						"hx-swap": "outerHTML",
						"hx-indicator": "#check-indicator-" + fmt.Sprint(website.Website.ID),
					},
				}) {
					<span id={ "check-indicator-" + fmt.Sprint(website.Website.ID) } class="htmx-indicator">üîÑ</span>
					Check Now
				}
				@button.Button(button.Props{
					Variant: button.VariantDefault,
					Size: button.SizeSm,
					Class: "flex-1 bg-blue-600 hover:bg-blue-700 text-white",
					Href: "/uptime/website/" + fmt.Sprint(website.Website.ID),
				}) {
					View Details
				}
				@button.Button(button.Props{
					Variant: button.VariantDestructive,
					Size: button.SizeSm,
					Class: "px-3 bg-red-600 hover:bg-red-700 text-white",
					Attributes: templ.Attributes{
						"hx-delete": "/uptime/api/websites/" + fmt.Sprint(website.Website.ID),
						"hx-target": "closest .website-card",
						"hx-swap": "none",
						"hx-confirm": "Are you sure you want to delete " + website.Website.Name + "?",
						"hx-on::after-request": "if(event.detail.xhr.status === 200) { try { const response = JSON.parse(event.detail.xhr.responseText); if(response.success) { event.target.closest('.website-card').remove(); } } catch(e) { console.error('Failed to parse response:', e); } }",
					},
				}) {
					üóëÔ∏è
				}
			</div>
		}
	}
}

// StatusBadge renders a status badge with appropriate colors
templ StatusBadge(status string) {
	switch status {
	case "up":
		@badge.Badge(badge.Props{
			Variant: badge.VariantDefault,
			Class: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 border-green-200 dark:border-green-700",
		}) {
			Up
		}
	case "down":
		@badge.Badge(badge.Props{
			Variant: badge.VariantDestructive,
			Class: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 border-red-200 dark:border-red-700",
		}) {
			Down
		}
	default:
		@badge.Badge(badge.Props{
			Variant: badge.VariantSecondary,
			Class: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200 border-gray-200 dark:border-gray-600",
		}) {
			Unknown
		}
	}
} 