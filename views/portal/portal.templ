package portal

import (
	"the-ark/internal/auth"
	"the-ark/internal/core"
	"the-ark/views/components/badge"
	"the-ark/views/components/button"
	"the-ark/views/components/card"
)

// Dashboard renders the main portal dashboard
templ Dashboard(user *auth.User, featureStatus map[string]core.FeatureStatus) {
	<!doctype html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>The Ark - Portal Dashboard</title>
			<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js"></script>
			<link rel="stylesheet" href="/assets/css/portal.css"/>
			<script src="https://cdn.tailwindcss.com"></script>
		</head>
		<body class="bg-gray-50">
			<div class="min-h-screen flex">
				<!-- Sidebar -->
				<nav class="w-64 bg-white shadow-lg">
					<div class="p-6">
						<h1 class="text-2xl font-bold text-gray-900">The Ark</h1>
						if !user.IsAnonymous() {
							<div class="mt-4 p-3 bg-gray-50 rounded-lg">
								<div class="text-sm font-medium text-gray-900">{ user.Name }</div>
								<div class="text-sm text-gray-500">{ user.Email }</div>
							</div>
						}
					</div>
					
					<ul class="px-4 space-y-2">
						<li>
							<a href="/" class="flex items-center px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg">
								Dashboard
							</a>
						</li>
						<li>
							<a href="/uptime" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-100 rounded-lg">
								Uptime Monitor
							</a>
						</li>
						<li>
							<a href="/server" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-100 rounded-lg">
								Server Monitoring
							</a>
						</li>
						<li>
							<a href="/ssl" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-100 rounded-lg">
								SSL Tracker
							</a>
						</li>
						<li>
							<a href="/logs" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-100 rounded-lg">
								Log Viewer
							</a>
						</li>
					</ul>
					
					if !user.IsAnonymous() {
						<div class="absolute bottom-0 w-64 p-4">
							@button.Button(button.Props{
								Variant: button.VariantOutline,
								Size: button.SizeSm,
								Class: "w-full",
								Attributes: templ.Attributes{
									"hx-post": "/auth/logout",
									"hx-target": "body",
								},
							}) {
								Logout
							}
						</div>
					}
				</nav>
				
				<!-- Main Content -->
				<main class="flex-1 p-8">
					<header class="mb-8">
						<h2 class="text-3xl font-bold text-gray-900">Portal Dashboard for { user.ID }</h2>
						if user.IsAnonymous() {
							<div class="mt-4">
								@button.Button(button.Props{
									Variant: button.VariantDefault,
									Href: "/auth/login",
								}) {
									Login
								}
							</div>
						}
					</header>
					
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
						for featureName, status := range featureStatus {
							@card.Card(card.Props{
								Class: "bg-white hover:shadow-lg transition-shadow",
							}) {
								@card.Header() {
									<div class="flex items-center justify-between">
										<h3 class="text-lg font-semibold">{ status.Name }</h3>
										if status.Enabled {
											@badge.Badge(badge.Props{
												Variant: badge.VariantDefault,
											}) {
												Enabled
											}
										} else {
											@badge.Badge(badge.Props{
												Variant: badge.VariantSecondary,
											}) {
												Disabled
											}
										}
									</div>
								}
								@card.Content() {
									<p class="text-gray-600">{ status.Description }</p>
								}
								if status.Enabled {
									@card.Footer() {
										@button.Button(button.Props{
											Variant: button.VariantOutline,
											Size: button.SizeSm,
											Href: getFeatureUrl(featureName),
										}) {
											Open
										}
									}
								}
							}
						}
					</div>
				</main>
			</div>
		</body>
	</html>
}

// Helper function to get feature URLs
func getFeatureUrl(featureName string) string {
	switch featureName {
	case "uptime":
		return "/uptime"
	case "server":
		return "/server"
	case "ssl":
		return "/ssl"
	case "logs":
		return "/logs"
	default:
		return "/" + featureName
	}
}

// LoginPage renders the login page
templ LoginPage() {
	<!doctype html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>The Ark - Login</title>
			<script src="https://cdn.tailwindcss.com"></script>
		</head>
		<body class="bg-gray-50 min-h-screen flex items-center justify-center">
			<div class="max-w-md w-full space-y-8">
				<div class="text-center">
					<h1 class="text-3xl font-bold text-gray-900">The Ark</h1>
					<p class="mt-2 text-gray-600">Sign in to your account</p>
				</div>
				
				@card.Card() {
					@card.Content() {
						<form method="POST" action="/auth/login" class="space-y-4">
							<div>
								<label for="email" class="block text-sm font-medium text-gray-700">Email</label>
								<input type="email" id="email" name="email" required 
									class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"/>
							</div>
							<div>
								<label for="password" class="block text-sm font-medium text-gray-700">Password</label>
								<input type="password" id="password" name="password" required 
									class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"/>
							</div>
							@button.Button(button.Props{
								Type: button.TypeSubmit,
								Class: "w-full",
							}) {
								Sign In
							}
						</form>
					}
				}
			</div>
		</body>
	</html>
} 